
/*
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type FbaInventoryApiService service
/*
FbaInventoryApiService
Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the &#x60;startDateTime&#x60;, &#x60;sellerSkus&#x60; and &#x60;sellerSku&#x60; parameters:  - All inventory summaries with available details are returned when the &#x60;startDateTime&#x60;, &#x60;sellerSkus&#x60; and &#x60;sellerSku&#x60; parameters are omitted. - When &#x60;startDateTime&#x60; is provided, the operation returns inventory summaries that have had changes after the date and time specified. The &#x60;sellerSkus&#x60; and &#x60;sellerSku&#x60; parameters are ignored. **Important:** To avoid errors, use both &#x60;startDateTime&#x60; and &#x60;nextToken&#x60; to get the next page of inventory summaries that have changed after the date and time specified. - When the &#x60;sellerSkus&#x60; parameter is provided, the operation returns inventory summaries for only the specified &#x60;sellerSkus&#x60;. The &#x60;sellerSku&#x60; parameter is ignored. - When the &#x60;sellerSku&#x60; parameter is provided, the operation returns inventory summaries for only the specified &#x60;sellerSku&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param granularityType The granularity type for the inventory aggregation level.
 * @param granularityId The granularity ID for the inventory aggregation level.
 * @param marketplaceIds The marketplace ID for the marketplace for which to return inventory summaries.
 * @param optional nil or *FbaInventoryApiGetInventorySummariesOpts - Optional Parameters:
     * @param "Details" (optional.Bool) -  true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value).
     * @param "StartDateTime" (optional.Time) -  A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected.
     * @param "SellerSkus" (optional.Interface of []string) -  A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.
     * @param "SellerSku" (optional.String) -  A single seller SKU used for querying the specified seller SKU inventory summaries.
     * @param "NextToken" (optional.String) -  String token returned in the response of your previous request. The string token will expire 30 seconds after being created.
@return GetInventorySummariesResponse
*/

type FbaInventoryApiGetInventorySummariesOpts struct {
    Details optional.Bool
    StartDateTime optional.Time
    SellerSkus optional.Interface
    SellerSku optional.String
    NextToken optional.String
}

func (a *FbaInventoryApiService) GetInventorySummaries(ctx context.Context, granularityType string, granularityId string, marketplaceIds []string, localVarOptionals *FbaInventoryApiGetInventorySummariesOpts) (GetInventorySummariesResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue GetInventorySummariesResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/fba/inventory/v1/summaries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if len(marketplaceIds) > 1 {
		return localVarReturnValue, nil, reportError("marketplaceIds must have less than 1 elements")
	}

	if localVarOptionals != nil && localVarOptionals.Details.IsSet() {
		localVarQueryParams.Add("details", parameterToString(localVarOptionals.Details.Value(), ""))
	}
	localVarQueryParams.Add("granularityType", parameterToString(granularityType, ""))
	localVarQueryParams.Add("granularityId", parameterToString(granularityId, ""))
	if localVarOptionals != nil && localVarOptionals.StartDateTime.IsSet() {
		localVarQueryParams.Add("startDateTime", parameterToString(localVarOptionals.StartDateTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SellerSkus.IsSet() {
		localVarQueryParams.Add("sellerSkus", parameterToString(localVarOptionals.SellerSkus.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.SellerSku.IsSet() {
		localVarQueryParams.Add("sellerSku", parameterToString(localVarOptionals.SellerSku.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NextToken.IsSet() {
		localVarQueryParams.Add("nextToken", parameterToString(localVarOptionals.NextToken.Value(), ""))
	}
	localVarQueryParams.Add("marketplaceIds", parameterToString(marketplaceIds, "csv"))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v GetInventorySummariesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v GetInventorySummariesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v GetInventorySummariesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v GetInventorySummariesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v GetInventorySummariesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v GetInventorySummariesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v GetInventorySummariesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
