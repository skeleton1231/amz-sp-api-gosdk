
/*
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type VendorShippingApiService service
/*
VendorShippingApiService
Returns the Details about Shipment, Carrier Details,  status of the shipment, container details and other details related to shipment based on the filter parameters value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *VendorShippingApiGetShipmentDetailsOpts - Optional Parameters:
     * @param "Limit" (optional.Int64) -  The limit to the number of records returned. Default value is 50 records.
     * @param "SortOrder" (optional.String) -  Sort in ascending or descending order by purchase order creation date.
     * @param "NextToken" (optional.String) -  Used for pagination when there are more shipments than the specified result size limit.
     * @param "CreatedAfter" (optional.Time) -  Get Shipment Details that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @param "CreatedBefore" (optional.Time) -  Get Shipment Details that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @param "ShipmentConfirmedBefore" (optional.Time) -  Get Shipment Details by passing Shipment confirmed create Date Before. Must be in ISO-8601 date/time format.
     * @param "ShipmentConfirmedAfter" (optional.Time) -  Get Shipment Details by passing Shipment confirmed create Date After. Must be in ISO-8601 date/time format.
     * @param "PackageLabelCreatedBefore" (optional.Time) -  Get Shipment Details by passing Package label create Date by buyer. Must be in ISO-8601 date/time format.
     * @param "PackageLabelCreatedAfter" (optional.Time) -  Get Shipment Details by passing Package label create Date After by buyer. Must be in ISO-8601 date/time format.
     * @param "ShippedBefore" (optional.Time) -  Get Shipment Details by passing Shipped Date Before. Must be in ISO-8601 date/time format.
     * @param "ShippedAfter" (optional.Time) -  Get Shipment Details by passing Shipped Date After. Must be in ISO-8601 date/time format.
     * @param "EstimatedDeliveryBefore" (optional.Time) -  Get Shipment Details by passing Estimated Delivery Date Before. Must be in ISO-8601 date/time format.
     * @param "EstimatedDeliveryAfter" (optional.Time) -  Get Shipment Details by passing Estimated Delivery Date Before. Must be in ISO-8601 date/time format.
     * @param "ShipmentDeliveryBefore" (optional.Time) -  Get Shipment Details by passing Shipment Delivery Date Before. Must be in ISO-8601 date/time format.
     * @param "ShipmentDeliveryAfter" (optional.Time) -  Get Shipment Details by passing Shipment Delivery Date After. Must be in ISO-8601 date/time format.
     * @param "RequestedPickUpBefore" (optional.Time) -  Get Shipment Details by passing Before Requested pickup date. Must be in ISO-8601 date/time format.
     * @param "RequestedPickUpAfter" (optional.Time) -  Get Shipment Details by passing After Requested pickup date. Must be in ISO-8601 date/time format.
     * @param "ScheduledPickUpBefore" (optional.Time) -  Get Shipment Details by passing Before scheduled pickup date. Must be in ISO-8601 date/time format.
     * @param "ScheduledPickUpAfter" (optional.Time) -  Get Shipment Details by passing After Scheduled pickup date. Must be in ISO-8601 date/time format.
     * @param "CurrentShipmentStatus" (optional.String) -  Get Shipment Details by passing Current shipment status.
     * @param "VendorShipmentIdentifier" (optional.String) -  Get Shipment Details by passing Vendor Shipment ID
     * @param "BuyerReferenceNumber" (optional.String) -  Get Shipment Details by passing buyer Reference ID
     * @param "BuyerWarehouseCode" (optional.String) -  Get Shipping Details based on buyer warehouse code. This value should be same as &#x27;shipToParty.partyId&#x27; in the Shipment.
     * @param "SellerWarehouseCode" (optional.String) -  Get Shipping Details based on vendor warehouse code. This value should be same as &#x27;sellingParty.partyId&#x27; in the Shipment.
@return GetShipmentDetailsResponse
*/

type VendorShippingApiGetShipmentDetailsOpts struct {
    Limit optional.Int64
    SortOrder optional.String
    NextToken optional.String
    CreatedAfter optional.Time
    CreatedBefore optional.Time
    ShipmentConfirmedBefore optional.Time
    ShipmentConfirmedAfter optional.Time
    PackageLabelCreatedBefore optional.Time
    PackageLabelCreatedAfter optional.Time
    ShippedBefore optional.Time
    ShippedAfter optional.Time
    EstimatedDeliveryBefore optional.Time
    EstimatedDeliveryAfter optional.Time
    ShipmentDeliveryBefore optional.Time
    ShipmentDeliveryAfter optional.Time
    RequestedPickUpBefore optional.Time
    RequestedPickUpAfter optional.Time
    ScheduledPickUpBefore optional.Time
    ScheduledPickUpAfter optional.Time
    CurrentShipmentStatus optional.String
    VendorShipmentIdentifier optional.String
    BuyerReferenceNumber optional.String
    BuyerWarehouseCode optional.String
    SellerWarehouseCode optional.String
}

func (a *VendorShippingApiService) GetShipmentDetails(ctx context.Context, localVarOptionals *VendorShippingApiGetShipmentDetailsOpts) (GetShipmentDetailsResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue GetShipmentDetailsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/vendor/shipping/v1/shipments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortOrder.IsSet() {
		localVarQueryParams.Add("sortOrder", parameterToString(localVarOptionals.SortOrder.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NextToken.IsSet() {
		localVarQueryParams.Add("nextToken", parameterToString(localVarOptionals.NextToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreatedAfter.IsSet() {
		localVarQueryParams.Add("createdAfter", parameterToString(localVarOptionals.CreatedAfter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreatedBefore.IsSet() {
		localVarQueryParams.Add("createdBefore", parameterToString(localVarOptionals.CreatedBefore.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipmentConfirmedBefore.IsSet() {
		localVarQueryParams.Add("shipmentConfirmedBefore", parameterToString(localVarOptionals.ShipmentConfirmedBefore.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipmentConfirmedAfter.IsSet() {
		localVarQueryParams.Add("shipmentConfirmedAfter", parameterToString(localVarOptionals.ShipmentConfirmedAfter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PackageLabelCreatedBefore.IsSet() {
		localVarQueryParams.Add("packageLabelCreatedBefore", parameterToString(localVarOptionals.PackageLabelCreatedBefore.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PackageLabelCreatedAfter.IsSet() {
		localVarQueryParams.Add("packageLabelCreatedAfter", parameterToString(localVarOptionals.PackageLabelCreatedAfter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShippedBefore.IsSet() {
		localVarQueryParams.Add("shippedBefore", parameterToString(localVarOptionals.ShippedBefore.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShippedAfter.IsSet() {
		localVarQueryParams.Add("shippedAfter", parameterToString(localVarOptionals.ShippedAfter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EstimatedDeliveryBefore.IsSet() {
		localVarQueryParams.Add("estimatedDeliveryBefore", parameterToString(localVarOptionals.EstimatedDeliveryBefore.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EstimatedDeliveryAfter.IsSet() {
		localVarQueryParams.Add("estimatedDeliveryAfter", parameterToString(localVarOptionals.EstimatedDeliveryAfter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipmentDeliveryBefore.IsSet() {
		localVarQueryParams.Add("shipmentDeliveryBefore", parameterToString(localVarOptionals.ShipmentDeliveryBefore.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShipmentDeliveryAfter.IsSet() {
		localVarQueryParams.Add("shipmentDeliveryAfter", parameterToString(localVarOptionals.ShipmentDeliveryAfter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RequestedPickUpBefore.IsSet() {
		localVarQueryParams.Add("requestedPickUpBefore", parameterToString(localVarOptionals.RequestedPickUpBefore.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RequestedPickUpAfter.IsSet() {
		localVarQueryParams.Add("requestedPickUpAfter", parameterToString(localVarOptionals.RequestedPickUpAfter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ScheduledPickUpBefore.IsSet() {
		localVarQueryParams.Add("scheduledPickUpBefore", parameterToString(localVarOptionals.ScheduledPickUpBefore.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ScheduledPickUpAfter.IsSet() {
		localVarQueryParams.Add("scheduledPickUpAfter", parameterToString(localVarOptionals.ScheduledPickUpAfter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CurrentShipmentStatus.IsSet() {
		localVarQueryParams.Add("currentShipmentStatus", parameterToString(localVarOptionals.CurrentShipmentStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VendorShipmentIdentifier.IsSet() {
		localVarQueryParams.Add("vendorShipmentIdentifier", parameterToString(localVarOptionals.VendorShipmentIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BuyerReferenceNumber.IsSet() {
		localVarQueryParams.Add("buyerReferenceNumber", parameterToString(localVarOptionals.BuyerReferenceNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BuyerWarehouseCode.IsSet() {
		localVarQueryParams.Add("buyerWarehouseCode", parameterToString(localVarOptionals.BuyerWarehouseCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SellerWarehouseCode.IsSet() {
		localVarQueryParams.Add("sellerWarehouseCode", parameterToString(localVarOptionals.SellerWarehouseCode.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v GetShipmentDetailsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v GetShipmentDetailsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v GetShipmentDetailsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v GetShipmentDetailsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v GetShipmentDetailsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 415 {
			var v GetShipmentDetailsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v GetShipmentDetailsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v GetShipmentDetailsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v GetShipmentDetailsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
VendorShippingApiService
Returns transport Labels based on the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *VendorShippingApiGetShipmentLabelsOpts - Optional Parameters:
     * @param "Limit" (optional.Int64) -  The limit to the number of records returned. Default value is 50 records.
     * @param "SortOrder" (optional.String) -  Sort in ascending or descending order by transport label creation date.
     * @param "NextToken" (optional.String) -  Used for pagination when there are more transport label than the specified result size limit.
     * @param "LabelCreatedAfter" (optional.Time) -  transport Labels that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @param "LabelcreatedBefore" (optional.Time) -  transport Labels that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @param "BuyerReferenceNumber" (optional.String) -  Get transport labels by passing Buyer Reference Number to retreive the corresponding transport label.
     * @param "VendorShipmentIdentifier" (optional.String) -  Get transport labels by passing Vendor Shipment ID to retreive the corresponding transport label.
     * @param "SellerWarehouseCode" (optional.String) -  Get Shipping labels based Vendor Warehouse code. This value should be same as &#x27;shipFromParty.partyId&#x27; in the Shipment.
@return GetShipmentLabels
*/

type VendorShippingApiGetShipmentLabelsOpts struct {
    Limit optional.Int64
    SortOrder optional.String
    NextToken optional.String
    LabelCreatedAfter optional.Time
    LabelcreatedBefore optional.Time
    BuyerReferenceNumber optional.String
    VendorShipmentIdentifier optional.String
    SellerWarehouseCode optional.String
}

func (a *VendorShippingApiService) GetShipmentLabels(ctx context.Context, localVarOptionals *VendorShippingApiGetShipmentLabelsOpts) (GetShipmentLabels, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue GetShipmentLabels
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/vendor/shipping/v1/transportLabels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortOrder.IsSet() {
		localVarQueryParams.Add("sortOrder", parameterToString(localVarOptionals.SortOrder.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NextToken.IsSet() {
		localVarQueryParams.Add("nextToken", parameterToString(localVarOptionals.NextToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LabelCreatedAfter.IsSet() {
		localVarQueryParams.Add("labelCreatedAfter", parameterToString(localVarOptionals.LabelCreatedAfter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LabelcreatedBefore.IsSet() {
		localVarQueryParams.Add("labelcreatedBefore", parameterToString(localVarOptionals.LabelcreatedBefore.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BuyerReferenceNumber.IsSet() {
		localVarQueryParams.Add("buyerReferenceNumber", parameterToString(localVarOptionals.BuyerReferenceNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VendorShipmentIdentifier.IsSet() {
		localVarQueryParams.Add("vendorShipmentIdentifier", parameterToString(localVarOptionals.VendorShipmentIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SellerWarehouseCode.IsSet() {
		localVarQueryParams.Add("sellerWarehouseCode", parameterToString(localVarOptionals.SellerWarehouseCode.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v GetShipmentLabels
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v GetShipmentLabels
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v GetShipmentLabels
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v GetShipmentLabels
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v GetShipmentLabels
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 415 {
			var v GetShipmentLabels
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v GetShipmentLabels
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v GetShipmentLabels
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v GetShipmentLabels
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
VendorShippingApiService
Submits one or more shipment confirmations for vendor orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
@return SubmitShipmentConfirmationsResponse
*/
func (a *VendorShippingApiService) SubmitShipmentConfirmations(ctx context.Context, body SubmitShipmentConfirmationsRequest) (SubmitShipmentConfirmationsResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue SubmitShipmentConfirmationsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/vendor/shipping/v1/shipmentConfirmations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 202 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 413 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 415 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
VendorShippingApiService
Submits one or more shipment request for vendor Orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
@return SubmitShipmentConfirmationsResponse
*/
func (a *VendorShippingApiService) SubmitShipments(ctx context.Context, body SubmitShipments) (SubmitShipmentConfirmationsResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue SubmitShipmentConfirmationsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/vendor/shipping/v1/shipments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 202 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 413 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 415 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v SubmitShipmentConfirmationsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
